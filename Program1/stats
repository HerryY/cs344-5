#!/bin/bash
# PROGRAM 1 -- CS344 
# Winter 2016
# Author: Geoffrey Pard
# Due Date: 1/25/16
# This program computes average and median from numbers
# provided in a test file.  The calculations may be 
# performed either by row or by column. 
# At prompt usage: stats {-rows|cols} [file]
#-------------------------------------------------------------------------------


#-----------------------------------------------------------------
#Setup for temp files and also trap for unexpected interruptions
#-----------------------------------------------------------------
avg=avg1$$
med=med1$$
results=results$$
TMP_FILE=tempFile$$

trap "rm -f $avg $med $results $TMP_FILE; exit 1" INT HUP TERM

#---------------------------------------------------------------
# Function for Calculating Rows
#---------------------------------------------------------------
select_rows()
{
    echo -e "Average\tMedian"   

    while read myLine
    do
        # Init/Reset tracking variables 
        sum=0 
        count=0 
        average=0
    
        #-----------------------------------
        # Sort to make median calc easier
        #-----------------------------------
        sortedLine=$( echo $myLine | tr " " "\n" | sort -g )


        #----------------------------
        # Loop to sum a row	
        # Also counts values in a row
        #----------------------------	
        for i in $sortedLine
        do
            num=$i
            count=$[ $count + 1 ]
            sum=$[ $sum + $num ]
        done

        #----------------------------------
        # Setup and Find Median by counting.
        # Each line gets sorted above.
        #----------------------------------
        halfCount=`expr $[ $count / 2 ] + 1`
        x=1  #counter

        for y in $sortedLine
        do
            num2=$y
            if [ $x -le $halfCount ]
            then
                median=$num2
                x=$[ $x + 1 ]
            fi
        done

        #----------------------------------------------------------
        # Average is Sum of Row divided by count of Row.
        # Using Arb Prec calc to get float initially; then add
        # .5 followed by integer division to
        # to get appropriate rounding
        #---------------------------------------------------------
        if [ $count -eq 0 ]
        then
            average=""
        else
            average=$( echo "scale=2;  $sum / $count" | bc )
            average=$( echo "($average + .5) / 1" | bc )
        fi

        #Print Results of Calculations
        echo -e "$average\t$median"

    done < $user_file

}

#-------------------------------------------------------------------------------
# Function for Calculating Columns
#-------------------------------------------------------------------------------
select_col()
{
    # Init counter/tracking variables
    col=1
    j=0
   

    # Get the number of columns from 'w count'--------
    num_col=$( head -n 1 $user_file | wc -w )
   
    #-------------------------------------------------
    # Loop through the file and cut a new column with
    # each pass.
    #-------------------------------------------------
    while [ $j -lt $num_col ]
    do
        sum=0
        count=0
        average=0

        #Cut, Transalte, and Sort line for Calculating
        sortedLine=$( cut -f $col $user_file | tr " " "\n" | sort -g )
        
        #--------------------------------------------
        # Loop sorted line to sum the digits
        #--------------------------------------------
        for i in $sortedLine
        do
            sum=`expr $sum + $i`
            count=`expr $count + 1`
        done

        #--------------------------------------------
        # Find the average of each column.
        #--------------------------------------------
        if [ $count -eq 0 ]
        then
            average=""
        else
            average=$( echo "scale=2;  $sum / $count" | bc )
            average=$( echo "($average + .5) / 1" | bc )
        fi

        #----------------------------------
        # Setup and Find Median by counting.
        # Each line gets sorted above.
        #----------------------------------
        halfCount=`expr $[ $count / 2 ] + 1`
        x=1  #counter

        for y in $sortedLine
        do
            num2=$y
            if [ $x -le $halfCount ]
            then
                median=$num2
                x=$[ $x + 1 ]
            fi
        done

        # Write Averages and Medians to Temp File
        echo $average >> $avg
        echo $median >> $med

        # Increment counters
        col=`expr $col + 1`
        j=`expr $j + 1`
    done
    
    #--------------------------------------------------
    # Write final results to a temp file in the 
    # required format.  This section also cleans up 
    # temp files when complete.
    #--------------------------------------------------    
    echo -e "Averages: " > $results
    if [ -e $avg ]
    then
        tr "\n" "\t" < $avg >> $results
    fi
    echo -e "\n" >> $results

    echo -e "Medians: " >> $results
    if [ -e $med ]
    then
        tr "\n" "\t" < $med >> $results
    fi
    echo -e "\n" >> $results
  
    # Remove Temp files "avg" and "med"
    rm -f $avg $med

    # Output and remove file "results"
    cat $results
    rm -f $results
}

#--------------------------------------------------------------------------
# PROGRAM -- Command Line Controls 
#--------------------------------------------------------------------------

#---------------------------------------------------------
# If no file is entered this function handles 
# input at the prompt. Data is kept in a temp file and
# assigned like an ordinary file
#--------------------------------------------------------  
no_file()
{
    while read line
    do 
        echo -e "$line" >> $TMP_FILE
    done < /dev/stdin
	
    user_file=$TMP_FILE	
}

#Minor Variables used in printing
usage_message=$( echo "Usage: stats {-rows|-cols} [file]" )
error_message=$( echo "stats: cannot read $2" )

#-------------------------------------------------------
# Check for parameters and send control to appropriate  
# section for calculations
#------------------------------------------------------
if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]
then
	echo $usage_message >&2
	exit 1	
fi

# If second parameter then file must exist and be readable
if [[ "$2" != "" ]]
then
	if [ ! -r "$2" ]
	then
		echo $error_message >&2
		exit 1
	
	else
		user_file=$2
	fi
else
	no_file
fi

#----------------------------------
# Calculate Rows or Columns
#----------------------------------
if [[ "$1" == -r* ]]
then
	select_rows
elif [[ "$1" == -c* ]]
then
	select_col
else
	echo $usage_message >&2
	exit 1	
	
fi

#Remove last temp files associated with std. input
rm -f $TMP_FILE

exit 0




